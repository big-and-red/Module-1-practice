def set_methods(numbers: set) -> tuple[set, set, set]:
    """
    1. Добавить числа 7 и 8 в множество
    2. Удалить число 3 из множества
    3. Попробовать удалить несуществующее число 10

    >>> set_methods({1, 2, 3, 4})
    ({1, 2, 3, 4, 7, 8}, {1, 2, 4, 7, 8}, {1, 2, 4, 7, 8})
    """
    pass


def set_operations(set1: set, set2: set) -> tuple[set, set, set]:
    """
    1. Найти общие элементы двух множеств
    2. Объединить два множества
    3. Найти элементы, которые есть в первом множестве, но нет во втором

    >>> set_operations({1, 2, 3, 4}, {3, 4, 5, 6})
    ({3, 4}, {1, 2, 3, 4, 5, 6}, {1, 2})
    """
    pass


def set_comparisons(set1: set, set2: set) -> tuple[bool, bool, bool]:
    """
    1. Проверить является ли первое множество подмножеством второго
    2. Проверить является ли второе множество надмножеством первого
    3. Проверить не пересекаются ли множества

    >>> set_comparisons({1, 2}, {1, 2, 3, 4})
    (True, False, False)
    """
    pass


def set_modifications(numbers: set) -> tuple[set, set, int]:
    """
    1. Удалить и вернуть случайный элемент
    2. Создать копию множества
    3. Вернуть количество элементов в множестве

    >>> numbers = {1, 2, 3, 4, 5}
    >>> result = set_modifications(numbers)
    >>> len(result[0]) == 4  # После удаления случайного элемента
    True
    >>> result[1] == numbers  # Копия исходного множества
    True
    >>> result[2] == 5  # Количество элементов в исходном множестве
    True
    """
    pass


def set_update_operations(set1: set, set2: set) -> tuple[set, set, set]:
    """
    1. Добавить все элементы из второго множества к первому
    2. Оставить только общие элементы с другим множеством
    3. Удалить все элементы, которые есть во втором множестве

    >>> set_update_operations({1, 2, 3}, {3, 4, 5})
    ({1, 2, 3, 4, 5}, {3}, {1, 2})
    """
    pass


if __name__ == "__main__":
    import doctest

    doctest.testmod()
